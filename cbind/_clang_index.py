# This is generated by cbind and should not be edited.
from ctypes import *

# pylint: disable-all

import sys
if sys.platform == 'darwin':
    _lib = cdll.LoadLibrary('libclang.dylib')
elif sys.platform == 'win32' or sys.platform == 'cygwin':
    _lib = cdll.LoadLibrary('libclang.dll')
else:
    _lib = cdll.LoadLibrary('libclang.so')
del sys

class String(Structure):
    pass
String._fields_ = [('data', c_void_p),
                   ('private_flags', c_uint)]

clang_getCString = _lib.clang_getCString
clang_getCString.argtypes = [String]
clang_getCString.restype = c_char_p

clang_disposeString = _lib.clang_disposeString
clang_disposeString.argtypes = [String]

class TranslationUnitImpl(Structure):
    pass

class UnsavedFile(Structure):
    pass
UnsavedFile._fields_ = [('Filename', c_char_p),
                        ('Contents', c_char_p),
                        ('Length', c_ulong)]

clang_createIndex = _lib.clang_createIndex
clang_createIndex.argtypes = [c_int, c_int]
clang_createIndex.restype = c_void_p

clang_disposeIndex = _lib.clang_disposeIndex
clang_disposeIndex.argtypes = [c_void_p]

clang_getFileName = _lib.clang_getFileName
clang_getFileName.argtypes = [c_void_p]
clang_getFileName.restype = String

class SourceLocation(Structure):
    pass
SourceLocation._fields_ = [('ptr_data', (c_void_p * 2)),
                           ('int_data', c_uint)]

clang_equalLocations = _lib.clang_equalLocations
clang_equalLocations.argtypes = [SourceLocation, SourceLocation]
clang_equalLocations.restype = c_uint

clang_getInstantiationLocation = _lib.clang_getInstantiationLocation
clang_getInstantiationLocation.argtypes = [SourceLocation, POINTER(c_void_p), POINTER(c_uint), POINTER(c_uint), POINTER(c_uint)]

class DiagnosticSeverity(c_uint):
    pass

clang_getNumDiagnostics = _lib.clang_getNumDiagnostics
clang_getNumDiagnostics.argtypes = [POINTER(TranslationUnitImpl)]
clang_getNumDiagnostics.restype = c_uint

clang_getDiagnostic = _lib.clang_getDiagnostic
clang_getDiagnostic.argtypes = [POINTER(TranslationUnitImpl), c_uint]
clang_getDiagnostic.restype = c_void_p

clang_disposeDiagnostic = _lib.clang_disposeDiagnostic
clang_disposeDiagnostic.argtypes = [c_void_p]

clang_getDiagnosticSeverity = _lib.clang_getDiagnosticSeverity
clang_getDiagnosticSeverity.argtypes = [c_void_p]
clang_getDiagnosticSeverity.restype = DiagnosticSeverity

clang_getDiagnosticLocation = _lib.clang_getDiagnosticLocation
clang_getDiagnosticLocation.argtypes = [c_void_p]
clang_getDiagnosticLocation.restype = SourceLocation

clang_getDiagnosticSpelling = _lib.clang_getDiagnosticSpelling
clang_getDiagnosticSpelling.argtypes = [c_void_p]
clang_getDiagnosticSpelling.restype = String

clang_parseTranslationUnit = _lib.clang_parseTranslationUnit
clang_parseTranslationUnit.argtypes = [c_void_p, c_char_p, POINTER(c_char_p), c_int, POINTER(UnsavedFile), c_uint, c_uint]
clang_parseTranslationUnit.restype = POINTER(TranslationUnitImpl)

clang_disposeTranslationUnit = _lib.clang_disposeTranslationUnit
clang_disposeTranslationUnit.argtypes = [POINTER(TranslationUnitImpl)]

class CursorKind(c_uint):
    pass
Cursor_UnexposedDecl = 1
Cursor_StructDecl = 2
Cursor_UnionDecl = 3
Cursor_ClassDecl = 4
Cursor_EnumDecl = 5
Cursor_FieldDecl = 6
Cursor_EnumConstantDecl = 7
Cursor_FunctionDecl = 8
Cursor_VarDecl = 9
Cursor_ParmDecl = 10
Cursor_ObjCInterfaceDecl = 11
Cursor_ObjCCategoryDecl = 12
Cursor_ObjCProtocolDecl = 13
Cursor_ObjCPropertyDecl = 14
Cursor_ObjCIvarDecl = 15
Cursor_ObjCInstanceMethodDecl = 16
Cursor_ObjCClassMethodDecl = 17
Cursor_ObjCImplementationDecl = 18
Cursor_ObjCCategoryImplDecl = 19
Cursor_TypedefDecl = 20
Cursor_CXXMethod = 21
Cursor_Namespace = 22
Cursor_LinkageSpec = 23
Cursor_Constructor = 24
Cursor_Destructor = 25
Cursor_ConversionFunction = 26
Cursor_TemplateTypeParameter = 27
Cursor_NonTypeTemplateParameter = 28
Cursor_TemplateTemplateParameter = 29
Cursor_FunctionTemplate = 30
Cursor_ClassTemplate = 31
Cursor_ClassTemplatePartialSpecialization = 32
Cursor_NamespaceAlias = 33
Cursor_UsingDirective = 34
Cursor_UsingDeclaration = 35
Cursor_TypeAliasDecl = 36
Cursor_ObjCSynthesizeDecl = 37
Cursor_ObjCDynamicDecl = 38
Cursor_CXXAccessSpecifier = 39
Cursor_FirstDecl = 1
Cursor_LastDecl = 39
Cursor_FirstRef = 40
Cursor_ObjCSuperClassRef = 40
Cursor_ObjCProtocolRef = 41
Cursor_ObjCClassRef = 42
Cursor_TypeRef = 43
Cursor_CXXBaseSpecifier = 44
Cursor_TemplateRef = 45
Cursor_NamespaceRef = 46
Cursor_MemberRef = 47
Cursor_LabelRef = 48
Cursor_OverloadedDeclRef = 49
Cursor_VariableRef = 50
Cursor_LastRef = 50
Cursor_FirstInvalid = 70
Cursor_InvalidFile = 70
Cursor_NoDeclFound = 71
Cursor_NotImplemented = 72
Cursor_InvalidCode = 73
Cursor_LastInvalid = 73
Cursor_FirstExpr = 100
Cursor_UnexposedExpr = 100
Cursor_DeclRefExpr = 101
Cursor_MemberRefExpr = 102
Cursor_CallExpr = 103
Cursor_ObjCMessageExpr = 104
Cursor_BlockExpr = 105
Cursor_IntegerLiteral = 106
Cursor_FloatingLiteral = 107
Cursor_ImaginaryLiteral = 108
Cursor_StringLiteral = 109
Cursor_CharacterLiteral = 110
Cursor_ParenExpr = 111
Cursor_UnaryOperator = 112
Cursor_ArraySubscriptExpr = 113
Cursor_BinaryOperator = 114
Cursor_CompoundAssignOperator = 115
Cursor_ConditionalOperator = 116
Cursor_CStyleCastExpr = 117
Cursor_CompoundLiteralExpr = 118
Cursor_InitListExpr = 119
Cursor_AddrLabelExpr = 120
Cursor_StmtExpr = 121
Cursor_GenericSelectionExpr = 122
Cursor_GNUNullExpr = 123
Cursor_CXXStaticCastExpr = 124
Cursor_CXXDynamicCastExpr = 125
Cursor_CXXReinterpretCastExpr = 126
Cursor_CXXConstCastExpr = 127
Cursor_CXXFunctionalCastExpr = 128
Cursor_CXXTypeidExpr = 129
Cursor_CXXBoolLiteralExpr = 130
Cursor_CXXNullPtrLiteralExpr = 131
Cursor_CXXThisExpr = 132
Cursor_CXXThrowExpr = 133
Cursor_CXXNewExpr = 134
Cursor_CXXDeleteExpr = 135
Cursor_UnaryExpr = 136
Cursor_ObjCStringLiteral = 137
Cursor_ObjCEncodeExpr = 138
Cursor_ObjCSelectorExpr = 139
Cursor_ObjCProtocolExpr = 140
Cursor_ObjCBridgedCastExpr = 141
Cursor_PackExpansionExpr = 142
Cursor_SizeOfPackExpr = 143
Cursor_LambdaExpr = 144
Cursor_ObjCBoolLiteralExpr = 145
Cursor_ObjCSelfExpr = 146
Cursor_LastExpr = 146
Cursor_FirstStmt = 200
Cursor_UnexposedStmt = 200
Cursor_LabelStmt = 201
Cursor_CompoundStmt = 202
Cursor_CaseStmt = 203
Cursor_DefaultStmt = 204
Cursor_IfStmt = 205
Cursor_SwitchStmt = 206
Cursor_WhileStmt = 207
Cursor_DoStmt = 208
Cursor_ForStmt = 209
Cursor_GotoStmt = 210
Cursor_IndirectGotoStmt = 211
Cursor_ContinueStmt = 212
Cursor_BreakStmt = 213
Cursor_ReturnStmt = 214
Cursor_GCCAsmStmt = 215
Cursor_AsmStmt = 215
Cursor_ObjCAtTryStmt = 216
Cursor_ObjCAtCatchStmt = 217
Cursor_ObjCAtFinallyStmt = 218
Cursor_ObjCAtThrowStmt = 219
Cursor_ObjCAtSynchronizedStmt = 220
Cursor_ObjCAutoreleasePoolStmt = 221
Cursor_ObjCForCollectionStmt = 222
Cursor_CXXCatchStmt = 223
Cursor_CXXTryStmt = 224
Cursor_CXXForRangeStmt = 225
Cursor_SEHTryStmt = 226
Cursor_SEHExceptStmt = 227
Cursor_SEHFinallyStmt = 228
Cursor_MSAsmStmt = 229
Cursor_NullStmt = 230
Cursor_DeclStmt = 231
Cursor_OMPParallelDirective = 232
Cursor_LastStmt = 232
Cursor_TranslationUnit = 300
Cursor_FirstAttr = 400
Cursor_UnexposedAttr = 400
Cursor_IBActionAttr = 401
Cursor_IBOutletAttr = 402
Cursor_IBOutletCollectionAttr = 403
Cursor_CXXFinalAttr = 404
Cursor_CXXOverrideAttr = 405
Cursor_AnnotateAttr = 406
Cursor_AsmLabelAttr = 407
Cursor_LastAttr = 407
Cursor_PreprocessingDirective = 500
Cursor_MacroDefinition = 501
Cursor_MacroExpansion = 502
Cursor_MacroInstantiation = 502
Cursor_InclusionDirective = 503
Cursor_FirstPreprocessing = 500
Cursor_LastPreprocessing = 503
Cursor_ModuleImportDecl = 600
Cursor_FirstExtraDecl = 600
Cursor_LastExtraDecl = 600

class Cursor(Structure):
    pass
Cursor._fields_ = [('kind', CursorKind),
                   ('xdata', c_int),
                   ('data', (c_void_p * 3))]

clang_getNullCursor = _lib.clang_getNullCursor
clang_getNullCursor.restype = Cursor

clang_getTranslationUnitCursor = _lib.clang_getTranslationUnitCursor
clang_getTranslationUnitCursor.argtypes = [POINTER(TranslationUnitImpl)]
clang_getTranslationUnitCursor.restype = Cursor

clang_equalCursors = _lib.clang_equalCursors
clang_equalCursors.argtypes = [Cursor, Cursor]
clang_equalCursors.restype = c_uint

clang_hashCursor = _lib.clang_hashCursor
clang_hashCursor.argtypes = [Cursor]
clang_hashCursor.restype = c_uint

clang_isDeclaration = _lib.clang_isDeclaration
clang_isDeclaration.argtypes = [CursorKind]
clang_isDeclaration.restype = c_uint

class LinkageKind(c_uint):
    pass
Linkage_Invalid = 0
Linkage_NoLinkage = 1
Linkage_Internal = 2
Linkage_UniqueExternal = 3
Linkage_External = 4

clang_getCursorLinkage = _lib.clang_getCursorLinkage
clang_getCursorLinkage.argtypes = [Cursor]
clang_getCursorLinkage.restype = LinkageKind

clang_getCursorSemanticParent = _lib.clang_getCursorSemanticParent
clang_getCursorSemanticParent.argtypes = [Cursor]
clang_getCursorSemanticParent.restype = Cursor

clang_getCursorLocation = _lib.clang_getCursorLocation
clang_getCursorLocation.argtypes = [Cursor]
clang_getCursorLocation.restype = SourceLocation

class TypeKind(c_uint):
    pass
Type_Invalid = 0
Type_Unexposed = 1
Type_Void = 2
Type_Bool = 3
Type_Char_U = 4
Type_UChar = 5
Type_Char16 = 6
Type_Char32 = 7
Type_UShort = 8
Type_UInt = 9
Type_ULong = 10
Type_ULongLong = 11
Type_UInt128 = 12
Type_Char_S = 13
Type_SChar = 14
Type_WChar = 15
Type_Short = 16
Type_Int = 17
Type_Long = 18
Type_LongLong = 19
Type_Int128 = 20
Type_Float = 21
Type_Double = 22
Type_LongDouble = 23
Type_NullPtr = 24
Type_Overload = 25
Type_Dependent = 26
Type_ObjCId = 27
Type_ObjCClass = 28
Type_ObjCSel = 29
Type_FirstBuiltin = 2
Type_LastBuiltin = 29
Type_Complex = 100
Type_Pointer = 101
Type_BlockPointer = 102
Type_LValueReference = 103
Type_RValueReference = 104
Type_Record = 105
Type_Enum = 106
Type_Typedef = 107
Type_ObjCInterface = 108
Type_ObjCObjectPointer = 109
Type_FunctionNoProto = 110
Type_FunctionProto = 111
Type_ConstantArray = 112
Type_Vector = 113
Type_IncompleteArray = 114
Type_VariableArray = 115
Type_DependentSizedArray = 116

class Type(Structure):
    pass
Type._fields_ = [('kind', TypeKind),
                 ('data', (c_void_p * 2))]

clang_getCursorType = _lib.clang_getCursorType
clang_getCursorType.argtypes = [Cursor]
clang_getCursorType.restype = Type

clang_getTypedefDeclUnderlyingType = _lib.clang_getTypedefDeclUnderlyingType
clang_getTypedefDeclUnderlyingType.argtypes = [Cursor]
clang_getTypedefDeclUnderlyingType.restype = Type

clang_getEnumDeclIntegerType = _lib.clang_getEnumDeclIntegerType
clang_getEnumDeclIntegerType.argtypes = [Cursor]
clang_getEnumDeclIntegerType.restype = Type

clang_getEnumConstantDeclValue = _lib.clang_getEnumConstantDeclValue
clang_getEnumConstantDeclValue.argtypes = [Cursor]
clang_getEnumConstantDeclValue.restype = c_longlong

clang_getEnumConstantDeclUnsignedValue = _lib.clang_getEnumConstantDeclUnsignedValue
clang_getEnumConstantDeclUnsignedValue.argtypes = [Cursor]
clang_getEnumConstantDeclUnsignedValue.restype = c_ulonglong

clang_getFieldDeclBitWidth = _lib.clang_getFieldDeclBitWidth
clang_getFieldDeclBitWidth.argtypes = [Cursor]
clang_getFieldDeclBitWidth.restype = c_int

clang_Cursor_getNumArguments = _lib.clang_Cursor_getNumArguments
clang_Cursor_getNumArguments.argtypes = [Cursor]
clang_Cursor_getNumArguments.restype = c_int

clang_Cursor_getArgument = _lib.clang_Cursor_getArgument
clang_Cursor_getArgument.argtypes = [Cursor, c_uint]
clang_Cursor_getArgument.restype = Cursor

clang_equalTypes = _lib.clang_equalTypes
clang_equalTypes.argtypes = [Type, Type]
clang_equalTypes.restype = c_uint

clang_getCanonicalType = _lib.clang_getCanonicalType
clang_getCanonicalType.argtypes = [Type]
clang_getCanonicalType.restype = Type

clang_getPointeeType = _lib.clang_getPointeeType
clang_getPointeeType.argtypes = [Type]
clang_getPointeeType.restype = Type

clang_getTypeDeclaration = _lib.clang_getTypeDeclaration
clang_getTypeDeclaration.argtypes = [Type]
clang_getTypeDeclaration.restype = Cursor

clang_getResultType = _lib.clang_getResultType
clang_getResultType.argtypes = [Type]
clang_getResultType.restype = Type

clang_getNumArgTypes = _lib.clang_getNumArgTypes
clang_getNumArgTypes.argtypes = [Type]
clang_getNumArgTypes.restype = c_int

clang_getArgType = _lib.clang_getArgType
clang_getArgType.argtypes = [Type, c_uint]
clang_getArgType.restype = Type

clang_isFunctionTypeVariadic = _lib.clang_isFunctionTypeVariadic
clang_isFunctionTypeVariadic.argtypes = [Type]
clang_isFunctionTypeVariadic.restype = c_uint

clang_getArrayElementType = _lib.clang_getArrayElementType
clang_getArrayElementType.argtypes = [Type]
clang_getArrayElementType.restype = Type

clang_getArraySize = _lib.clang_getArraySize
clang_getArraySize.argtypes = [Type]
clang_getArraySize.restype = c_longlong

clang_Type_getAlignOf = _lib.clang_Type_getAlignOf
clang_Type_getAlignOf.argtypes = [Type]
clang_Type_getAlignOf.restype = c_longlong

clang_Cursor_isBitField = _lib.clang_Cursor_isBitField
clang_Cursor_isBitField.argtypes = [Cursor]
clang_Cursor_isBitField.restype = c_uint

class ChildVisitResult(c_uint):
    pass

clang_visitChildren = _lib.clang_visitChildren
clang_visitChildren.argtypes = [Cursor, CFUNCTYPE(ChildVisitResult, Cursor, Cursor, c_void_p), c_void_p]
clang_visitChildren.restype = c_uint

clang_getCursorSpelling = _lib.clang_getCursorSpelling
clang_getCursorSpelling.argtypes = [Cursor]
clang_getCursorSpelling.restype = String

clang_isCursorDefinition = _lib.clang_isCursorDefinition
clang_isCursorDefinition.argtypes = [Cursor]
clang_isCursorDefinition.restype = c_uint

