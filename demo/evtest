#!/usr/bin/env python

'''Demo program that dumps input events.'''

import argparse
import os
import sys
from ctypes import (cdll, byref, create_string_buffer,
        sizeof, memset, c_long, c_ulong, c_int, c_ushort,
        c_void_p, c_size_t, c_ssize_t)

import linux_input
from linux_input import (
        EV_ABS,
        EV_KEY,
        EV_LED,
        EV_MAX,
        EV_MSC,
        EV_REL,
        EV_REP,
        EV_SND,
        EV_SYN,
        EVIOCGBIT,
        EVIOCGID,
        EVIOCGNAME,
        EVIOCGVERSION,
        ID_BUS,
        ID_PRODUCT,
        ID_VENDOR,
        ID_VERSION,
        KEY_MAX,
        MSC_RAW,
        MSC_SCAN,
        input_absinfo,
        input_event,
        )


def build_index(prefix):
    '''Build a index of constants.'''
    const_index = {}
    for name, val in vars(linux_input).iteritems():
        if name.startswith(prefix):
            const_index[val] = name
    return const_index


EVENTS = build_index('EV_')
RELATIVES = build_index('REL_')
KEYS = build_index('KEY_')
KEYS.update(build_index('BTN_'))
ABSOLUTES = build_index('ABS_')
MISC = build_index('MISC_')
LEDS = build_index('LED_')
REPEATS = build_index('REP_')
SOUNDS = build_index('SND_')

EV_NAMES = {
        EV_SYN: EVENTS,
        EV_KEY: KEYS,
        EV_REL: RELATIVES,
        EV_ABS: ABSOLUTES,
        EV_MSC: MISC,
        EV_LED: LEDS,
        EV_SND: SOUNDS,
        EV_REP: REPEATS,
}


# Manually translated C macros that cbind is unable to do so
EVIOCGABS = lambda abs: ((2 << 30) | (ord('E') << 8) | (0x40 + abs) |
		(sizeof(input_absinfo) << 16))
EVIOCSABS = lambda abs: ((1 << 30) | (ord('E') << 8) | (0xc0 + abs) |
		(sizeof(input_absinfo) << 16))


class CLibrary:
    '''C library.'''

    def __init__(self):
        '''Initialize the object.'''
        self.libc = cdll.LoadLibrary('libc.so.6')

        # int ioctl(int d, int request, ...);
        self.ioctl = self.libc.ioctl
        self.ioctl.restype = c_int

        # ssize_t read(int fd, void *buf, size_t count);
        self.read = self.libc.read
        self.read.argstype = [c_int, c_void_p, c_size_t]
        self.read.restype = c_ssize_t

        # pylint: disable=E1101
        self._errno = c_int.in_dll(self.libc, 'errno')

    @property
    def errno(self):
        '''Retrieve errno.'''
        return self._errno.value

    def perror(self, message=None):
        '''Print error message and exit.'''
        message = message or os.path.basename(sys.argv[0])
        sys.stderr.write('%s: %s\n' % (message, os.strerror(self.errno)))
        sys.exit(1)


def show_info(libc, dev):
    '''Show input driver and device info.'''
    tag_columns = 25

    version = c_int(0)
    if libc.ioctl(dev, EVIOCGVERSION, byref(version)) < 0:
        libc.perror()
    version = version.value
    print ('%s: %d.%d.%d' %
            ('input driver version'.ljust(tag_columns),
                version >> 16, (version >> 8) & 0xff, version & 0xff))

    device_id = (c_ushort * 4)()
    memset(device_id, 0, sizeof(device_id))
    if libc.ioctl(dev, EVIOCGID, device_id) < 0:
        libc.perror()
    print ('%s: bus 0x%x vendor 0x%x product 0x%x version 0x%x' %
            ('input device ID'.ljust(tag_columns),
                device_id[ID_BUS],
                device_id[ID_VENDOR], device_id[ID_PRODUCT],
                device_id[ID_VERSION]))

    name = create_string_buffer(256)
    memset(name, 0, sizeof(name))
    if libc.ioctl(dev, EVIOCGNAME(sizeof(name)), name) < 0:
        libc.perror()
    print '%s: \'%s\'' % ('input device name'.ljust(tag_columns), name.value)


def get_name(event_type, event_code):
    '''Get name from event type and code.'''
    name = EV_NAMES.get(event_type)
    if name:
        name = name.get(event_code)
    return name or '?'


def show_supported_events(libc, dev):
    '''Show supported events.'''
    bits_per_long = sizeof(c_long) * 8
    nbits = lambda x: (x - 1) / bits_per_long + 1
    off = lambda x: x % bits_per_long
    bit = lambda x: 1 << off(x)
    long_ = lambda x: x / bits_per_long
    test_bit = lambda bit, array: (array[long_(bit)] >> off(bit)) & 1
    absval = ('Value', 'Min', 'Max', 'Fuzz', 'Flat')
    bit = ((c_ulong * nbits(KEY_MAX)) * EV_MAX)()
    memset(bit, 0, sizeof(bit))
    if libc.ioctl(dev, EVIOCGBIT(0, EV_MAX), bit[0]) < 0:
        libc.perror()
    print 'supported events:'
    ev_abs = (c_int * 5)()
    for i in xrange(EV_MAX):
        if not test_bit(i, bit[0]):
            continue
        print '  event type %d (%s)' % (i, EVENTS.get(i, '?'))
        if i == 0:
            continue
        # XXX: Ignore return value of this ioctl because it may return
        # negative value (when dev is a keyboard).
        libc.ioctl(dev, EVIOCGBIT(i, KEY_MAX), bit[i])
        for j in xrange(KEY_MAX):
            if not test_bit(j, bit[i]):
                continue
            print '    event code %d (%s)' % (j, get_name(i, j))
            if i != EV_ABS:
                continue
            memset(ev_abs, 0, sizeof(ev_abs))
            if libc.ioctl(dev, EVIOCGABS(j), ev_abs) < 0:
                libc.perror()
            for k in xrange(5):
                if k < 3 or ev_abs[k]:
                    print '      %-5s %6d' % (absval[k], ev_abs[k])


def show_event(event):
    '''Show input event.'''
    fmt = 'event: time %ld.%06ld, '
    if event.type == EV_SYN:
        print ((fmt + '-------------- %s ------------') %
                (event.time.tv_sec, event.time.tv_usec,
                    'Config Sync' if event.code else 'Report Sync'))
    elif (event.type == EV_MSC and
            (event.code == MSC_RAW or event.code == MSC_SCAN)):
        print ((fmt + 'type %d (%s), code %d (%s), value %02x') %
                (event.time.tv_sec, event.time.tv_usec, event.type,
                    EVENTS.get(event.type, '?'),
                    event.code,
                    get_name(event.type, event.code),
                    event.value))
    else:
        print ((fmt + 'type %d (%s), code %d (%s), value %d') %
                (event.time.tv_sec, event.time.tv_usec, event.type,
                    EVENTS.get(event.type, '?'),
                    event.code,
                    get_name(event.type, event.code),
                    event.value))


def main():
    '''Main function.'''
    parser = argparse.ArgumentParser(description='Dump input events')
    parser.add_argument('dev', help='input device, such as /dev/input/event0')
    args = parser.parse_args()
    libc = CLibrary()
    dev = os.open(args.dev, os.O_RDONLY)
    try:
        show_info(libc, dev)
        show_supported_events(libc, dev)
        print 'testing ... (interrupt to exit)'
        events = (input_event * 64)()
        while True:
            size = libc.read(dev, events, sizeof(events))
            if size < sizeof(input_event):
                libc.perror('error reading')
            for i in xrange(size / sizeof(input_event)):
                show_event(events[i])
    except KeyboardInterrupt:
        pass
    finally:
        os.close(dev)
    return 0


if __name__ == '__main__':
    sys.exit(main())
