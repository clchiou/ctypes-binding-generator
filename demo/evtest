#!/usr/bin/env python

'''Demo program that dumps input events.'''

import argparse
import os
import sys
from ctypes import (cdll, byref, create_string_buffer,
        sizeof, memset, c_long, c_ulong, c_int, c_ushort,
        c_void_p, c_size_t, c_ssize_t)

from linux_input import *
from linux_input import _IOR, _IOW


EVENTS = {
        EV_SYN: 'Sync',
        EV_KEY: 'Key',
        EV_REL: 'Relative',
        EV_ABS: 'Absolute',
        EV_MSC: 'Misc',
        EV_LED: 'LED',
        EV_SND: 'Sound',
        EV_REP: 'Repeat',
        EV_FF: 'ForceFeedback',
        EV_PWR: 'Power',
        EV_FF_STATUS: 'ForceFeedbackStatus',
}

RELATIVES = {
        REL_X: 'X',
        REL_Y: 'Y',
        REL_Z: 'Z',
        REL_HWHEEL: 'HWheel',
        REL_DIAL: 'Dial',
        REL_WHEEL: 'Wheel',
        REL_MISC: 'Misc',
}

KEYS = {
        KEY_RESERVED: 'Reserved',
        KEY_ESC: 'Esc',
        KEY_1: '1',
        KEY_2: '2',
        KEY_3: '3',
        KEY_4: '4',
        KEY_5: '5',
        KEY_6: '6',
        KEY_7: '7',
        KEY_8: '8',
        KEY_9: '9',
        KEY_0: '0',
        KEY_MINUS: 'Minus',
        KEY_EQUAL: 'Equal',
        KEY_BACKSPACE: 'Backspace',
        KEY_TAB: 'Tab',
        KEY_Q: 'Q',
        KEY_W: 'W',
        KEY_E: 'E',
        KEY_R: 'R',
        KEY_T: 'T',
        KEY_Y: 'Y',
        KEY_U: 'U',
        KEY_I: 'I',
        KEY_O: 'O',
        KEY_P: 'P',
        KEY_LEFTBRACE: 'LeftBrace',
        KEY_RIGHTBRACE: 'RightBrace',
        KEY_ENTER: 'Enter',
        KEY_LEFTCTRL: 'LeftControl',
        KEY_A: 'A',
        KEY_S: 'S',
        KEY_D: 'D',
        KEY_F: 'F',
        KEY_G: 'G',
        KEY_H: 'H',
        KEY_J: 'J',
        KEY_K: 'K',
        KEY_L: 'L',
        KEY_SEMICOLON: 'Semicolon',
        KEY_APOSTROPHE: 'Apostrophe',
        KEY_GRAVE: 'Grave',
        KEY_LEFTSHIFT: 'LeftShift',
        KEY_BACKSLASH: 'BackSlash',
        KEY_Z: 'Z',
        KEY_X: 'X',
        KEY_C: 'C',
        KEY_V: 'V',
        KEY_B: 'B',
        KEY_N: 'N',
        KEY_M: 'M',
        KEY_COMMA: 'Comma',
        KEY_DOT: 'Dot',
        KEY_SLASH: 'Slash',
        KEY_RIGHTSHIFT: 'RightShift',
        KEY_KPASTERISK: 'KPAsterisk',
        KEY_LEFTALT: 'LeftAlt',
        KEY_SPACE: 'Space',
        KEY_CAPSLOCK: 'CapsLock',
        KEY_F1: 'F1',
        KEY_F2: 'F2',
        KEY_F3: 'F3',
        KEY_F4: 'F4',
        KEY_F5: 'F5',
        KEY_F6: 'F6',
        KEY_F7: 'F7',
        KEY_F8: 'F8',
        KEY_F9: 'F9',
        KEY_F10: 'F10',
        KEY_NUMLOCK: 'NumLock',
        KEY_SCROLLLOCK: 'ScrollLock',
        KEY_KP7: 'KP7',
        KEY_KP8: 'KP8',
        KEY_KP9: 'KP9',
        KEY_KPMINUS: 'KPMinus',
        KEY_KP4: 'KP4',
        KEY_KP5: 'KP5',
        KEY_KP6: 'KP6',
        KEY_KPPLUS: 'KPPlus',
        KEY_KP1: 'KP1',
        KEY_KP2: 'KP2',
        KEY_KP3: 'KP3',
        KEY_KP0: 'KP0',
        KEY_KPDOT: 'KPDot',
        KEY_ZENKAKUHANKAKU: 'Zenkaku/Hankaku',
        KEY_102ND: '102nd',
        KEY_F11: 'F11',
        KEY_F12: 'F12',
        KEY_RO: 'RO',
        KEY_KATAKANA: 'Katakana',
        KEY_HIRAGANA: 'HIRAGANA',
        KEY_HENKAN: 'Henkan',
        KEY_KATAKANAHIRAGANA: 'Katakana/Hiragana',
        KEY_MUHENKAN: 'Muhenkan',
        KEY_KPJPCOMMA: 'KPJpComma',
        KEY_KPENTER: 'KPEnter',
        KEY_RIGHTCTRL: 'RightCtrl',
        KEY_KPSLASH: 'KPSlash',
        KEY_SYSRQ: 'SysRq',
        KEY_RIGHTALT: 'RightAlt',
        KEY_LINEFEED: 'LineFeed',
        KEY_HOME: 'Home',
        KEY_UP: 'Up',
        KEY_PAGEUP: 'PageUp',
        KEY_LEFT: 'Left',
        KEY_RIGHT: 'Right',
        KEY_END: 'End',
        KEY_DOWN: 'Down',
        KEY_PAGEDOWN: 'PageDown',
        KEY_INSERT: 'Insert',
        KEY_DELETE: 'Delete',
        KEY_MACRO: 'Macro',
        KEY_MUTE: 'Mute',
        KEY_VOLUMEDOWN: 'VolumeDown',
        KEY_VOLUMEUP: 'VolumeUp',
        KEY_POWER: 'Power',
        KEY_KPEQUAL: 'KPEqual',
        KEY_KPPLUSMINUS: 'KPPlusMinus',
        KEY_PAUSE: 'Pause',
        KEY_KPCOMMA: 'KPComma',
        KEY_HANGUEL: 'Hanguel',
        KEY_HANJA: 'Hanja',
        KEY_YEN: 'Yen',
        KEY_LEFTMETA: 'LeftMeta',
        KEY_RIGHTMETA: 'RightMeta',
        KEY_COMPOSE: 'Compose',
        KEY_STOP: 'Stop',
        KEY_AGAIN: 'Again',
        KEY_PROPS: 'Props',
        KEY_UNDO: 'Undo',
        KEY_FRONT: 'Front',
        KEY_COPY: 'Copy',
        KEY_OPEN: 'Open',
        KEY_PASTE: 'Paste',
        KEY_FIND: 'Find',
        KEY_CUT: 'Cut',
        KEY_HELP: 'Help',
        KEY_MENU: 'Menu',
        KEY_CALC: 'Calc',
        KEY_SETUP: 'Setup',
        KEY_SLEEP: 'Sleep',
        KEY_WAKEUP: 'WakeUp',
        KEY_FILE: 'File',
        KEY_SENDFILE: 'SendFile',
        KEY_DELETEFILE: 'DeleteFile',
        KEY_XFER: 'X-fer',
        KEY_PROG1: 'Prog1',
        KEY_PROG2: 'Prog2',
        KEY_WWW: 'WWW',
        KEY_MSDOS: 'MSDOS',
        KEY_COFFEE: 'Coffee',
        KEY_DIRECTION: 'Direction',
        KEY_CYCLEWINDOWS: 'CycleWindows',
        KEY_MAIL: 'Mail',
        KEY_BOOKMARKS: 'Bookmarks',
        KEY_COMPUTER: 'Computer',
        KEY_BACK: 'Back',
        KEY_FORWARD: 'Forward',
        KEY_CLOSECD: 'CloseCD',
        KEY_EJECTCD: 'EjectCD',
        KEY_EJECTCLOSECD: 'EjectCloseCD',
        KEY_NEXTSONG: 'NextSong',
        KEY_PLAYPAUSE: 'PlayPause',
        KEY_PREVIOUSSONG: 'PreviousSong',
        KEY_STOPCD: 'StopCD',
        KEY_RECORD: 'Record',
        KEY_REWIND: 'Rewind',
        KEY_PHONE: 'Phone',
        KEY_ISO: 'ISOKey',
        KEY_CONFIG: 'Config',
        KEY_HOMEPAGE: 'HomePage',
        KEY_REFRESH: 'Refresh',
        KEY_EXIT: 'Exit',
        KEY_MOVE: 'Move',
        KEY_EDIT: 'Edit',
        KEY_SCROLLUP: 'ScrollUp',
        KEY_SCROLLDOWN: 'ScrollDown',
        KEY_KPLEFTPAREN: 'KPLeftParenthesis',
        KEY_KPRIGHTPAREN: 'KPRightParenthesis',
        KEY_F13: 'F13',
        KEY_F14: 'F14',
        KEY_F15: 'F15',
        KEY_F16: 'F16',
        KEY_F17: 'F17',
        KEY_F18: 'F18',
        KEY_F19: 'F19',
        KEY_F20: 'F20',
        KEY_F21: 'F21',
        KEY_F22: 'F22',
        KEY_F23: 'F23',
        KEY_F24: 'F24',
        KEY_PLAYCD: 'PlayCD',
        KEY_PAUSECD: 'PauseCD',
        KEY_PROG3: 'Prog3',
        KEY_PROG4: 'Prog4',
        KEY_SUSPEND: 'Suspend',
        KEY_CLOSE: 'Close',
        KEY_PLAY: 'Play',
        KEY_FASTFORWARD: 'Fast Forward',
        KEY_BASSBOOST: 'Bass Boost',
        KEY_PRINT: 'Print',
        KEY_HP: 'HP',
        KEY_CAMERA: 'Camera',
        KEY_SOUND: 'Sound',
        KEY_QUESTION: 'Question',
        KEY_EMAIL: 'Email',
        KEY_CHAT: 'Chat',
        KEY_SEARCH: 'Search',
        KEY_CONNECT: 'Connect',
        KEY_FINANCE: 'Finance',
        KEY_SPORT: 'Sport',
        KEY_SHOP: 'Shop',
        KEY_ALTERASE: 'Alternate Erase',
        KEY_CANCEL: 'Cancel',
        KEY_BRIGHTNESSDOWN: 'Brightness down',
        KEY_BRIGHTNESSUP: 'Brightness up',
        KEY_MEDIA: 'Media',
        KEY_UNKNOWN: 'Unknown',
        BTN_0: 'Btn0',
        BTN_1: 'Btn1',
        BTN_2: 'Btn2',
        BTN_3: 'Btn3',
        BTN_4: 'Btn4',
        BTN_5: 'Btn5',
        BTN_6: 'Btn6',
        BTN_7: 'Btn7',
        BTN_8: 'Btn8',
        BTN_9: 'Btn9',
        BTN_LEFT: 'LeftBtn',
        BTN_RIGHT: 'RightBtn',
        BTN_MIDDLE: 'MiddleBtn',
        BTN_SIDE: 'SideBtn',
        BTN_EXTRA: 'ExtraBtn',
        BTN_FORWARD: 'ForwardBtn',
        BTN_BACK: 'BackBtn',
        BTN_TASK: 'TaskBtn',
        BTN_TRIGGER: 'Trigger',
        BTN_THUMB: 'ThumbBtn',
        BTN_THUMB2: 'ThumbBtn2',
        BTN_TOP: 'TopBtn',
        BTN_TOP2: 'TopBtn2',
        BTN_PINKIE: 'PinkieBtn',
        BTN_BASE: 'BaseBtn',
        BTN_BASE2: 'BaseBtn2',
        BTN_BASE3: 'BaseBtn3',
        BTN_BASE4: 'BaseBtn4',
        BTN_BASE5: 'BaseBtn5',
        BTN_BASE6: 'BaseBtn6',
        BTN_DEAD: 'BtnDead',
        BTN_A: 'BtnA',
        BTN_B: 'BtnB',
        BTN_C: 'BtnC',
        BTN_X: 'BtnX',
        BTN_Y: 'BtnY',
        BTN_Z: 'BtnZ',
        BTN_TL: 'BtnTL',
        BTN_TR: 'BtnTR',
        BTN_TL2: 'BtnTL2',
        BTN_TR2: 'BtnTR2',
        BTN_SELECT: 'BtnSelect',
        BTN_START: 'BtnStart',
        BTN_MODE: 'BtnMode',
        BTN_THUMBL: 'BtnThumbL',
        BTN_THUMBR: 'BtnThumbR',
        BTN_TOOL_PEN: 'ToolPen',
        BTN_TOOL_RUBBER: 'ToolRubber',
        BTN_TOOL_BRUSH: 'ToolBrush',
        BTN_TOOL_PENCIL: 'ToolPencil',
        BTN_TOOL_AIRBRUSH: 'ToolAirbrush',
        BTN_TOOL_FINGER: 'ToolFinger',
        BTN_TOOL_MOUSE: 'ToolMouse',
        BTN_TOOL_LENS: 'ToolLens',
        BTN_TOUCH: 'Touch',
        BTN_STYLUS: 'Stylus',
        BTN_STYLUS2: 'Stylus2',
        BTN_TOOL_DOUBLETAP: 'Tool Doubletap',
        BTN_TOOL_TRIPLETAP: 'Tool Tripletap',
        BTN_GEAR_DOWN: 'WheelBtn',
        BTN_GEAR_UP: 'Gear up',
        KEY_OK: 'Ok',
        KEY_SELECT: 'Select',
        KEY_GOTO: 'Goto',
        KEY_CLEAR: 'Clear',
        KEY_POWER2: 'Power2',
        KEY_OPTION: 'Option',
        KEY_INFO: 'Info',
        KEY_TIME: 'Time',
        KEY_VENDOR: 'Vendor',
        KEY_ARCHIVE: 'Archive',
        KEY_PROGRAM: 'Program',
        KEY_CHANNEL: 'Channel',
        KEY_FAVORITES: 'Favorites',
        KEY_EPG: 'EPG',
        KEY_PVR: 'PVR',
        KEY_MHP: 'MHP',
        KEY_LANGUAGE: 'Language',
        KEY_TITLE: 'Title',
        KEY_SUBTITLE: 'Subtitle',
        KEY_ANGLE: 'Angle',
        KEY_ZOOM: 'Zoom',
        KEY_MODE: 'Mode',
        KEY_KEYBOARD: 'Keyboard',
        KEY_SCREEN: 'Screen',
        KEY_PC: 'PC',
        KEY_TV: 'TV',
        KEY_TV2: 'TV2',
        KEY_VCR: 'VCR',
        KEY_VCR2: 'VCR2',
        KEY_SAT: 'Sat',
        KEY_SAT2: 'Sat2',
        KEY_CD: 'CD',
        KEY_TAPE: 'Tape',
        KEY_RADIO: 'Radio',
        KEY_TUNER: 'Tuner',
        KEY_PLAYER: 'Player',
        KEY_TEXT: 'Text',
        KEY_DVD: 'DVD',
        KEY_AUX: 'Aux',
        KEY_MP3: 'MP3',
        KEY_AUDIO: 'Audio',
        KEY_VIDEO: 'Video',
        KEY_DIRECTORY: 'Directory',
        KEY_LIST: 'List',
        KEY_MEMO: 'Memo',
        KEY_CALENDAR: 'Calendar',
        KEY_RED: 'Red',
        KEY_GREEN: 'Green',
        KEY_YELLOW: 'Yellow',
        KEY_BLUE: 'Blue',
        KEY_CHANNELUP: 'ChannelUp',
        KEY_CHANNELDOWN: 'ChannelDown',
        KEY_FIRST: 'First',
        KEY_LAST: 'Last',
        KEY_AB: 'AB',
        KEY_NEXT: 'Next',
        KEY_RESTART: 'Restart',
        KEY_SLOW: 'Slow',
        KEY_SHUFFLE: 'Shuffle',
        KEY_BREAK: 'Break',
        KEY_PREVIOUS: 'Previous',
        KEY_DIGITS: 'Digits',
        KEY_TEEN: 'TEEN',
        KEY_TWEN: 'TWEN',
        KEY_DEL_EOL: 'Delete EOL',
        KEY_DEL_EOS: 'Delete EOS',
        KEY_INS_LINE: 'Insert line',
        KEY_DEL_LINE: 'Delete line',
}

ABSOLUTES = {
        ABS_X: 'X',
        ABS_Y: 'Y',
        ABS_Z: 'Z',
        ABS_RX: 'Rx',
        ABS_RY: 'Ry',
        ABS_RZ: 'Rz',
        ABS_THROTTLE: 'Throttle',
        ABS_RUDDER: 'Rudder',
        ABS_WHEEL: 'Wheel',
        ABS_GAS: 'Gas',
        ABS_BRAKE: 'Brake',
        ABS_HAT0X: 'Hat0X',
        ABS_HAT0Y: 'Hat0Y',
        ABS_HAT1X: 'Hat1X',
        ABS_HAT1Y: 'Hat1Y',
        ABS_HAT2X: 'Hat2X',
        ABS_HAT2Y: 'Hat2Y',
        ABS_HAT3X: 'Hat3X',
        ABS_HAT3Y: 'Hat 3Y',
        ABS_PRESSURE: 'Pressure',
        ABS_DISTANCE: 'Distance',
        ABS_TILT_X: 'XTilt',
        ABS_TILT_Y: 'YTilt',
        ABS_TOOL_WIDTH: 'Tool Width',
        ABS_VOLUME: 'Volume',
        ABS_MISC: 'Misc',
}

MISC = {
        MSC_SERIAL: 'Serial',
        MSC_PULSELED: 'Pulseled',
        MSC_GESTURE: 'Gesture',
        MSC_RAW: 'RawData',
        MSC_SCAN: 'ScanCode',
}

LEDS = {
        LED_NUML: 'NumLock',
        LED_CAPSL: 'CapsLock',
        LED_SCROLLL: 'ScrollLock',
        LED_COMPOSE: 'Compose',
        LED_KANA: 'Kana',
        LED_SLEEP: 'Sleep',
        LED_SUSPEND: 'Suspend',
        LED_MUTE: 'Mute',
        LED_MISC: 'Misc',
}

REPEATS = {
        REP_DELAY: 'Delay',
        REP_PERIOD: 'Period',
}

SOUNDS = {
        SND_CLICK: 'Click',
        SND_BELL: 'Bell',
        SND_TONE: 'Tone',
}

EV_NAMES = {
        EV_SYN: EVENTS,
        EV_KEY: KEYS,
        EV_REL: RELATIVES,
        EV_ABS: ABSOLUTES,
        EV_MSC: MISC,
        EV_LED: LEDS,
        EV_SND: SOUNDS,
        EV_REP: REPEATS,
}


# Manually translated C macros that cbind is unable to do so
EVIOCGABS = lambda abs: _IOR(ord('E'), 0x40 + abs, input_absinfo)
EVIOCSABS = lambda abs: _IOW(ord('E'), 0xc0 + abs, input_absinfo)


class CLibrary:
    '''C library.'''

    def __init__(self):
        '''Initialize the object.'''
        self.libc = cdll.LoadLibrary('libc.so.6')

        # int ioctl(int d, int request, ...);
        self.ioctl = self.libc.ioctl
        self.ioctl.restype = c_int

        # ssize_t read(int fd, void *buf, size_t count);
        self.read = self.libc.read
        self.read.argstype = [c_int, c_void_p, c_size_t]
        self.read.restype = c_ssize_t

        # pylint: disable=E1101
        self._errno = c_int.in_dll(self.libc, 'errno')

    @property
    def errno(self):
        '''Retrieve errno.'''
        return self._errno.value

    def perror(self, message=None):
        '''Print error message and exit.'''
        message = message or os.path.basename(sys.argv[0])
        sys.stderr.write('%s: %s\n' % (message, os.strerror(self.errno)))
        sys.exit(1)


def show_info(libc, dev):
    '''Show input driver and device info.'''
    tag_columns = 25

    version = c_int(0)
    if libc.ioctl(dev, EVIOCGVERSION, byref(version)) < 0:
        libc.perror()
    version = version.value
    print ('%s: %d.%d.%d' %
            ('input driver version'.ljust(tag_columns),
                version >> 16, (version >> 8) & 0xff, version & 0xff))

    device_id = (c_ushort * 4)()
    memset(device_id, 0, sizeof(device_id))
    if libc.ioctl(dev, EVIOCGID, device_id) < 0:
        libc.perror()
    print ('%s: bus 0x%x vendor 0x%x product 0x%x version 0x%x' %
            ('input device ID'.ljust(tag_columns),
                device_id[ID_BUS],
                device_id[ID_VENDOR], device_id[ID_PRODUCT],
                device_id[ID_VERSION]))

    name = create_string_buffer(256)
    memset(name, 0, sizeof(name))
    if libc.ioctl(dev, EVIOCGNAME(sizeof(name)), name) < 0:
        libc.perror()
    print '%s: \'%s\'' % ('input device name'.ljust(tag_columns), name.value)


def get_name(event_type, event_code):
    '''Get name from event type and code.'''
    name = EV_NAMES.get(event_type)
    if name:
        name = name.get(event_code)
    return name or '?'


def show_supported_events(libc, dev):
    '''Show supported events.'''
    bits_per_long = sizeof(c_long) * 8
    nbits = lambda x: (x - 1) / bits_per_long + 1
    off = lambda x: x % bits_per_long
    bit = lambda x: 1 << off(x)
    long_ = lambda x: x / bits_per_long
    test_bit = lambda bit, array: (array[long_(bit)] >> off(bit)) & 1
    absval = ('Value', 'Min', 'Max', 'Fuzz', 'Flat')
    bit = ((c_ulong * nbits(KEY_MAX)) * EV_MAX)()
    memset(bit, 0, sizeof(bit))
    if libc.ioctl(dev, EVIOCGBIT(0, EV_MAX), bit[0]) < 0:
        libc.perror()
    print 'supported events:'
    ev_abs = (c_int * 5)()
    for i in xrange(EV_MAX):
        if not test_bit(i, bit[0]):
            continue
        print '  event type %d (%s)' % (i, EVENTS.get(i, '?'))
        if i == 0:
            continue
        # XXX: Ignore return value of this ioctl because it may return
        # negative value (when dev is a keyboard).
        libc.ioctl(dev, EVIOCGBIT(i, KEY_MAX), bit[i])
        for j in xrange(KEY_MAX):
            if not test_bit(j, bit[i]):
                continue
            print '    event code %d (%s)' % (j, get_name(i, j))
            if i != EV_ABS:
                continue
            memset(ev_abs, 0, sizeof(ev_abs))
            if libc.ioctl(dev, EVIOCGABS(j), ev_abs) < 0:
                libc.perror()
            for k in xrange(5):
                if k < 3 or ev_abs[k]:
                    print '      %-5s %6d' % (absval[k], ev_abs[k])


def show_event(event):
    '''Show input event.'''
    fmt = 'event: time %ld.%06ld, '
    if event.type == EV_SYN:
        print ((fmt + '-------------- %s ------------') %
                (event.time.tv_sec, event.time.tv_usec,
                    'Config Sync' if event.code else 'Report Sync'))
    elif (event.type == EV_MSC and
            (event.code == MSC_RAW or event.code == MSC_SCAN)):
        print ((fmt + 'type %d (%s), code %d (%s), value %02x') %
                (event.time.tv_sec, event.time.tv_usec, event.type,
                    EVENTS.get(event.type, '?'),
                    event.code,
                    get_name(event.type, event.code),
                    event.value))
    else:
        print ((fmt + 'type %d (%s), code %d (%s), value %d') %
                (event.time.tv_sec, event.time.tv_usec, event.type,
                    EVENTS.get(event.type, '?'),
                    event.code,
                    get_name(event.type, event.code),
                    event.value))


def main():
    '''Main function.'''
    parser = argparse.ArgumentParser(description='Dump input events')
    parser.add_argument('dev', help='input device, such as /dev/input/event0')
    args = parser.parse_args()
    libc = CLibrary()
    dev = os.open(args.dev, os.O_RDONLY)
    try:
        show_info(libc, dev)
        show_supported_events(libc, dev)
        print 'testing ... (interrupt to exit)'
        events = (input_event * 64)()
        while True:
            size = libc.read(dev, events, sizeof(events))
            if size < sizeof(input_event):
                libc.perror('error reading')
            for i in xrange(size / sizeof(input_event)):
                show_event(events[i])
    except KeyboardInterrupt:
        pass
    finally:
        os.close(dev)
    return 0


if __name__ == '__main__':
    sys.exit(main())
